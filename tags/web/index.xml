<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on vknabel</title><link>https://vknabel.com/tags/web/</link><description>Recent content in Web on vknabel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Valentin Knabel</copyright><lastBuildDate>Thu, 09 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://vknabel.com/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>24hrs format for html inputs in Firefox</title><link>https://vknabel.com/tils/2023-11-09-firefox-24hrs-format-for-html-inputs/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2023-11-09-firefox-24hrs-format-for-html-inputs/</guid><description>&lt;p&gt;My system language on my linux machine is set to English, but as a German raised with 24-hour days, I simply cannot wrap my head around to get the 12-hours &lt;code&gt;am&lt;/code&gt;/&lt;code&gt;pm&lt;/code&gt; format intuitively. By the time I learned that &lt;code&gt;am&lt;/code&gt; is in the morning and &lt;code&gt;pm&lt;/code&gt; is in the evening. But when it comes to &lt;code&gt;12:00&lt;/code&gt; as the mid of the day and &lt;code&gt;0:00&lt;/code&gt; in the night, I&amp;rsquo;m lost.&lt;/p&gt;
&lt;p&gt;Of course I have already set the time format to 24-hours in my system settings (Ubuntu &lt;code&gt;Date &amp;amp; Time &amp;gt; Time Format&lt;/code&gt; set to &lt;code&gt;24-hour&lt;/code&gt;), but Firefox still uses the 12-hours format for html inputs with &lt;code&gt;type=&amp;quot;time&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As a solution you open &lt;a href="about:config"&gt;about:config&lt;/a&gt; and set &lt;code&gt;intl.regional_prefs.use_os_locales&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.
Now simple &lt;code&gt;&amp;lt;input type=&amp;quot;time&amp;quot;&amp;gt;&lt;/code&gt; will use the 24h format!&lt;/p&gt;</description></item><item><title>Atomic Design</title><link>https://vknabel.com/tils/2022-08-17-atomic-design/</link><pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-08-17-atomic-design/</guid><description>&lt;p&gt;Today I stumbled upon &lt;a href="https://atomicdesign.bradfrost.com/chapter-2/"&gt;Atomic Design&lt;/a&gt;. It is some kind of architectural pattern for the user interface. The goal is to build a reusable UI that is easy to understand and maintain.&lt;/p&gt;
&lt;p&gt;It starts with atoms, which represent the smallest units of the UI like text, buttons or images. By composing atoms, you get molecules like a search input (label, input, button). Then there are organisms like the top navigation bar. Templates align organisms. In the end, Pages fill the templates with acutal data.&lt;/p&gt;
&lt;p&gt;From my perspective, only the Pages connect to non-UI parts of the application. Hence the Atomic Design is only focused about the structure of the view.&lt;/p&gt;</description></item><item><title>Extracting Tailwind constants using theme</title><link>https://vknabel.com/tils/2022-07-25-extracting-tailwind-constants-using-theme/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-25-extracting-tailwind-constants-using-theme/</guid><description>&lt;p&gt;When using tailwind, you might be forced to manually write SCSS by hand.
With &lt;code&gt;@apply some classes;&lt;/code&gt; you can embed whole classes with all their styles into your own rules.&lt;/p&gt;
&lt;p&gt;But sometimes you need to only acces one single constant. Like accessing an animation timeout, default paddings, fonts or a color for some cases.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s possible with a simple &lt;code&gt;theme('colors.primary')&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Hugo Assets placed in Folders</title><link>https://vknabel.com/tils/2022-07-24-hugo-assets-placed-in-folders/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-24-hugo-assets-placed-in-folders/</guid><description>&lt;p&gt;If you need assets for a specific document or blog post, you can simply create a folder with your desired name and place your assets in there. Rename the markdown file to &lt;code&gt;index.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To reference the asset, just link it relative to the folder &lt;code&gt;[text](./my-file.ext)&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Hugo's Syntax Highlighting is static</title><link>https://vknabel.com/tils/2022-07-24-hugo-syntax-highlighting-without-js/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-24-hugo-syntax-highlighting-without-js/</guid><description>&lt;p&gt;Unlinke many other static site generators, the &lt;a href="https://gohugo.io/content-management/syntax-highlighting/"&gt;syntax highlighting of Hugo&lt;/a&gt; does not use client-side JavaScript, which is great!&lt;/p&gt;
&lt;p&gt;The underlying library is available as Go module &lt;a href="https://github.com/alecthomas/chroma"&gt;github.com/alecthomas/chroma&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>Overriding internal Hugo templates</title><link>https://vknabel.com/tils/2022-07-24-overriding-internal-hugo-templates/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-24-overriding-internal-hugo-templates/</guid><description>&lt;p&gt;You can override internal Hugo templates with your own templates.&lt;/p&gt;
&lt;p&gt;Simply create it in the &lt;code&gt;layouts&lt;/code&gt; folder and you are done!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s how I overrode &lt;code&gt;_internal/google_analytics_async.html&lt;/code&gt; with my own template - to not use GA!
That way I could avoid forking &lt;a href="https://github.com/athul/archie.git"&gt;athul&amp;rsquo;s archie&lt;/a&gt; template.&lt;/p&gt;</description></item><item><title>Templates for specific folders in Hugo</title><link>https://vknabel.com/tils/2022-07-24-templates-for-specific-folders/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-24-templates-for-specific-folders/</guid><description>&lt;p&gt;In Hugo you can simply create a folder within &lt;code&gt;content/&lt;/code&gt; and a template within &lt;code&gt;layouts/_default/&lt;/code&gt;. It will be used for the index route of that folder - even if your template did not specify a layout.&lt;/p&gt;
&lt;p&gt;This allowed me to create a separate template for all my learnings / til section!&lt;/p&gt;</description></item><item><title>Ultra-fast Hugo GitHub actions</title><link>https://vknabel.com/tils/2022-07-24-ultra-fast-hugo-github-actions/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-24-ultra-fast-hugo-github-actions/</guid><description>&lt;p&gt;I created a &lt;a href="https://github.com/vknabel/vknabel.github.io/blob/main/.github/workflows/pages.yml"&gt;GitHub workflow&lt;/a&gt; to automatically build and deploy my website to GitHub Pages.&lt;/p&gt;
&lt;p&gt;It uses &lt;a href="https://github.com/peaceiris/actions-hugo"&gt;peaceiris/actions-hugo@v2&lt;/a&gt; to build the website with Hugo and &lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;peaceiris/actions-gh-pages@v3&lt;/a&gt; to deploy it to GitHub Pages.&lt;/p&gt;</description></item><item><title>Angular *ngFor trackBy</title><link>https://vknabel.com/tils/2022-07-19-angular-ngfor-trackby/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-07-19-angular-ngfor-trackby/</guid><description>&lt;p&gt;When iterating over an array of objects in Angular, the change detection compares the references of the objects to detect changes.&lt;/p&gt;
&lt;p&gt;If the object reference now change too, like when updating local data from the network, Angular will discard the identity of all nested components within the &lt;code&gt;ngFor&lt;/code&gt; and re-render the entire list. Even if the objects deeply equal, the change detection will still detect the change.&lt;/p&gt;
&lt;p&gt;To help our loop caching components and instead changing their inputs, we can add a &lt;code&gt;trackBy&lt;/code&gt; function to the &lt;code&gt;ngFor&lt;/code&gt; directive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;checkbox-row&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;ngFor&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;let option of field.options; trackBy: fieldOptionTrackBy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in TypeScript, we add identity tracking function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fieldOptionTrackBy&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;index&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;number&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;option&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;AssistantStepOption&lt;/span&gt;)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;option&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;identifier&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Background:&lt;/strong&gt; Angular did reset my &lt;code&gt;mat-checkbox&lt;/code&gt; within the &lt;code&gt;ngFor&lt;/code&gt;. That lead to a discard of the freshly changed values.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;</description></item><item><title>WKWebView Configuration Cookies not working</title><link>https://vknabel.com/tils/2022-02-21-wkwebview-cookies-not-working/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2022-02-21-wkwebview-cookies-not-working/</guid><description>&lt;p&gt;Cookies in WKWebView are broken. When manually setting a Cookie using the Configuration, it will be ignored by the web view.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workaround:&lt;/strong&gt; add a &lt;code&gt;UserScript&lt;/code&gt; with the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;document.&lt;span style="color:#a6e22e"&gt;cookies&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;cookie_optin=essential:1|analytics:0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a great way to automatically reject Cookies and especially to disable tracking to either propagate the user&amp;rsquo;s ATT decision or to avoid implementing ATT in the beginning.&lt;/p&gt;</description></item><item><title>Reminder: websites contain weird characters</title><link>https://vknabel.com/tils/2021-11-16-reminder-websites-contain-weird-characters/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2021-11-16-reminder-websites-contain-weird-characters/</guid><description>&lt;p&gt;Copying contents from the web often copies weird characters, like the invisible character &lt;code&gt;U+FEFF&lt;/code&gt; or &amp;ldquo;Zero Width No-Break Space&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Code editors like VS Code might highlight those characters depending on your config, but other websites don&amp;rsquo;t. In my case I copied a secret for my CI pipeline including the invisible character.&lt;/p&gt;
&lt;p&gt;An easy workaround for this on the mac: Spotlight removes some of these characters. A simple &lt;code&gt;cmd+space&lt;/code&gt;, &lt;code&gt;cmd+v&lt;/code&gt;, &lt;code&gt;cmd+a&lt;/code&gt;, &lt;code&gt;cmd+c&lt;/code&gt; and &lt;code&gt;esc&lt;/code&gt; cleans the copied text.&lt;/p&gt;
&lt;p&gt;And suddenly the inserted password is correct!&lt;/p&gt;</description></item><item><title>Nestjs has great swagger decorators!</title><link>https://vknabel.com/tils/2021-07-16-nestjs-has-great-swagger-decorators/</link><pubDate>Fri, 16 Jul 2021 11:01:55 +0000</pubDate><guid>https://vknabel.com/tils/2021-07-16-nestjs-has-great-swagger-decorators/</guid><description>&lt;p&gt;Nestjs has very great decorators to annotate your routes, dtos and controllers.
This makes it really easy to keep your Swagger or OpenAPI documentation up to date.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.nestjs.com/openapi/types-and-parameters"&gt;https://docs.nestjs.com/openapi/types-and-parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Only downside:&lt;/em&gt; as TypeScript interfaces do not exist at runtime, you need to declare all your data transfer objects as classes, which might lead you to add convenience or validation methods to them. Don&amp;rsquo;t do it. These classes are just decorations.&lt;/p&gt;</description></item><item><title>XPath is powerful</title><link>https://vknabel.com/tils/2021-07-13-xpath-is-powerful/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2021-07-13-xpath-is-powerful/</guid><description>&lt;p&gt;XPath is a really powerful tool to query XML documents, if you are forced to. But in contrast to JSON queries, XPath does not return the actual values, but the nodes or attribtes you queried.&lt;/p&gt;
&lt;p&gt;XPath ist ziemlich mÃ¤chtig und man kommt relativ flott an das gewÃ¼nschte Ziel. Anders als bei JSON queries erhÃ¤lt man aber nicht die eigentlichen Werte, sonder den Node oder das Attribut selber.&lt;/p&gt;</description></item><item><title>Reminder: base64 is not secure!</title><link>https://vknabel.com/tils/2021-07-02-reminder-base64-is-not-secure/</link><pubDate>Fri, 02 Jul 2021 16:17:27 +0000</pubDate><guid>https://vknabel.com/tils/2021-07-02-reminder-base64-is-not-secure/</guid><description>&lt;p&gt;I have never actually seen serious code that&amp;rsquo;s running in production, that uses base64 encoding for password for over a decade.
Today I did.&lt;/p&gt;
&lt;p&gt;Here is the not so friendly reminder:&lt;/p&gt;
&lt;p&gt;base64 is no encryption or hashing algorithm. You should not use it to encode passwords.
And you should&amp;rsquo;t send the password over HTTP and Basic auth (no HTTPS, not even Digest auth).
Even if you do, trade the password for a token. Don&amp;rsquo;t repeat your mistakes with every single request.
And do not store the password locally. Store an encrypted session key instead.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t follow these basics, delete your code and shut down all your services.&lt;/p&gt;</description></item><item><title>SwiftGen has evolved!</title><link>https://vknabel.com/tils/2021-06-30-swiftgen-has-evolved/</link><pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2021-06-30-swiftgen-has-evolved/</guid><description>&lt;p&gt;I haven&amp;rsquo;t used &lt;a href="https://github.com/SwiftGen/SwiftGen"&gt;SwiftGen&lt;/a&gt; for a long time, but wow, it has improved a lot. I am a bit impressed.&lt;/p&gt;</description></item><item><title>CSS Rotate und Skew</title><link>https://vknabel.com/tils/2021-06-02-css-rotate-and-skew/</link><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid>https://vknabel.com/tils/2021-06-02-css-rotate-and-skew/</guid><description>&lt;p&gt;With CSS &lt;code&gt;skew&lt;/code&gt; you can simulate a perspective effect.
If you want to additionally &lt;code&gt;rotate&lt;/code&gt; the element, use &lt;code&gt;rotate&lt;/code&gt; first then &lt;code&gt;skew&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise you might get a really wierd result.&lt;/p&gt;</description></item><item><title>Refactoring RxJS Code in Angular</title><link>https://vknabel.com/posts/refactoring-rxjs-in-angular/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://vknabel.com/posts/refactoring-rxjs-in-angular/</guid><description>&lt;p&gt;Do you work with legacy RxJS code? Have you ever revisited your first few observables in your application? Do you need to fix bugs in an app of your learning phase? Are you still learning best practices for writing reactive code? This guide is for you. Even if you donât have anything to do with Angular, you may find this interesting. I will show you a way of how to improve your reactive streams in order to understand their functionality in many isolated, but tiny steps. Some of them may offer external dependencies, but we will always show, how to do it manually.&lt;/p&gt;
&lt;p&gt;Within each step we isolate/eliminate side effects, get more explicit about lifetime and learn about how to prevent unintended behavior. If you use this guide to refactor some specific code, you should perform all single steps in order and rerun all tests after each change. If you canât find the shown pattern you can take the next step.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Unit Testing:&lt;/em&gt; If you donât have any test create them upfront. Each step is a small refactoring: you may break something. For the guys of you who sit in front of really untestable code: I understand your situation. All âdangerousâ steps are marked. You need to test much more and manually. At least introduce unit tests afterwards. Dependency injection is your friend.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the beginning, we start easy and just isolate our side effects from our subscriptions. Instead of passing our callbacks directly, we wrap them into &lt;code&gt;do&lt;/code&gt; operators. Whenever you read a &lt;code&gt;do&lt;/code&gt;, you know: thatâs a side effect.
If you want a slightly more expressive variant try &lt;code&gt;@molecule/do-next&lt;/code&gt;, &lt;code&gt;@molecule/do-error&lt;/code&gt; and &lt;code&gt;@molecule/do-complete&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// previous code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;subscribe&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleNext&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; () =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleCompletion&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// refactored code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;do&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleNext&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; () =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleCompletion&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;subscribe&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* or with @molecule/do-next,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @molecule/do-error,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @molecule/do-complete
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;do&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleNext&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;next&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; () =&amp;gt; &lt;span style="color:#a6e22e"&gt;handleCompletion&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;subscribe&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Well, that was easy. Now letâs make all of our operators simpler. A good sign, that you tried to do more than one thing inside an operator is the use of closure blocks and explicit return statements (&lt;code&gt;() =&amp;gt; {}&lt;/code&gt;).
Especially if we extract all side effects from our operators, we know: &lt;em&gt;all&lt;/em&gt; side effects live within &lt;code&gt;do*&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt;!
Every statement that is not your &lt;code&gt;return&lt;/code&gt;-statement and no variable declaration, that is used for your &lt;code&gt;return&lt;/code&gt; is a side effect. If the operator is a &lt;code&gt;catch&lt;/code&gt;, move the side effects logically isolated (see above) to &lt;code&gt;do(undefined, yourErrorHandler)&lt;/code&gt;/&lt;code&gt;doError(yourErrorHandler)&lt;/code&gt;. Otherwise extract them to &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;doNext&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// previous code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt; =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#960050;background-color:#1e0010"&gt;â&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Could&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;not&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resolve&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;â&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;empty&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// refactored code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	 &lt;span style="color:#75715e"&gt;// or use .do(undefined, errorHandler)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;doError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt; =&amp;gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#960050;background-color:#1e0010"&gt;â&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Could&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;not&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resolve&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;â&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;(() =&amp;gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;empty&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to further simplify your operation handler, you can extract the whole block into a new &lt;code&gt;private&lt;/code&gt; method of your class. If it doesnât even depend on &lt;code&gt;this&lt;/code&gt; you can actually make it &lt;code&gt;static&lt;/code&gt;. The following case may seem a bit awkward at first, but it will keep everything simple and stupid. You will see, one can totally understand &lt;code&gt;previewOfFavorites$&lt;/code&gt; without knowing all those details. And if the underlying API changes, our public methods with all of our business logic just donât care.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// previous code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;previewOfFavorites&lt;/span&gt;()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Favorite&lt;/span&gt;[]&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;previewSize$&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;settings$&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;map&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;settings&lt;/span&gt; =&amp;gt; &lt;span style="color:#a6e22e"&gt;settings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;preview&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;favorites$&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;favorites$&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;combineLatest&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;previewSize$&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#a6e22e"&gt;previewOfFavorites$&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		(&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;favorites&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;favorites&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// refactored code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;previewOfFavorites$&lt;/span&gt;()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Favorite&lt;/span&gt;[]&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;combineLatest&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;previewSize$&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;previewOfFavorites$&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;		(&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;favorites&lt;/span&gt;) =&amp;gt; &lt;span style="color:#a6e22e"&gt;favorites&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;previewSize$&lt;/span&gt;()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;number&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;settings$&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;map&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;settings&lt;/span&gt; =&amp;gt; &lt;span style="color:#a6e22e"&gt;settings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;preview&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;get&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;favorites$&lt;/span&gt;()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Favorite&lt;/span&gt;[]&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;	&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;favorites$&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally we should have mostly single &lt;code&gt;return&lt;/code&gt;-statements as handlers and transformations. In that case we just use the short notation for closures. One exception are object literals, which need to be wrapped in parentheses (&lt;code&gt;() =&amp;gt; ({})&lt;/code&gt;) or leave the explicit return statement if you prefer it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// previous code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;map&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// refactored code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;myObservable$&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;map&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;) =&amp;gt; [&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="whats-next"&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;This blogpost has never been finished. It wasn&amp;rsquo;t touch for more than a year and I don&amp;rsquo;t understand all my remaining notes anymore.
Here they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Replace instance variables through Observables they represent&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store observable as &lt;code&gt;readonly&lt;/code&gt; and &lt;code&gt;shareReplay(1)&lt;/code&gt; and remove &lt;code&gt;subscribe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace usages with &lt;code&gt;withLatestFrom&lt;/code&gt; or &lt;code&gt;this.xx$.first().mergeMap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When filtered procedural, move logic into observable method for later use&lt;/li&gt;
&lt;li&gt;Keep visibility (prefer &lt;code&gt;private&lt;/code&gt;, of course)&lt;/li&gt;
&lt;li&gt;Angular templates should use &lt;code&gt;|async&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can now remove &lt;code&gt;changeDetector.markForCheck()&lt;/code&gt; invocations&lt;/li&gt;
&lt;li&gt;If param is requires synchronously use &lt;code&gt;Observable.defer().shareReplay(1)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove temporary observable and adjust &lt;code&gt;mergeMap&lt;/code&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If extracted subject with object for parameter, adjust function parameters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trigger actions with temporary observable named &lt;code&gt;*Action&lt;/code&gt; (&lt;code&gt;Observable.empty().finally&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sideeffect at the begginning before current operator, otherwise behind&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keep functions which prevent execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All subjects should always be private: add accessors &lt;code&gt;processDidChange&lt;/code&gt;, &lt;code&gt;processDidFail&lt;/code&gt;, &lt;code&gt;processDidComplete&lt;/code&gt;,&lt;code&gt;processObserver&lt;/code&gt; (just if required)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Never miss a dismiss in Ionic anymore</title><link>https://vknabel.com/posts/never-miss-a-dismiss-in-ionic-anymore/</link><pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate><guid>https://vknabel.com/posts/never-miss-a-dismiss-in-ionic-anymore/</guid><description>&lt;p&gt;Have you ever experienced, that some loading indicators just donât want to dismiss and literally stay forever? Maybe while users tried to login? The short story: you probably forgot to dismiss a loading indicator in some cases.&lt;/p&gt;
&lt;p&gt;Within this blogpost you will learn how to declaratively present loading indicators and how to prevent forgetting to dismissing it again.&lt;/p&gt;
&lt;p&gt;In our showcase we have a login page, that shall present a &lt;a href="https://ionicframework.com/docs/components/#loading"&gt;loading&lt;/a&gt; indicator while the user will be authenticated. The page itself only consists of inputs for our credentials and a login button calling &lt;code&gt;LoginPage.submitLogin&lt;/code&gt; on click inside &lt;code&gt;ion-content&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;ion-content&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;padding&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;ion-input&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;[(&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;ngModel&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;)]=&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;username&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;ion-input&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;ion-input&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;[(&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;ngModel&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;)]=&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;password&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;ion-input&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ion-button&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;click&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;)=&amp;#34;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;submitLogin&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;()&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;ion-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;LoginPage&lt;/code&gt; relies on an &lt;code&gt;AuthenticationService&lt;/code&gt;, mocked as follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;abstract&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;abstract&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;login&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;username&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;string&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;string&lt;/span&gt;)&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the user clicked on the login button, we will create a &lt;code&gt;Loading&lt;/code&gt; using the &lt;code&gt;LoadingController&lt;/code&gt;, present it and perform the login itself. Thereafter we need to dismiss the same &lt;code&gt;Loading&lt;/code&gt; again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;IonicPage&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Component&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;templateUrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./login.page.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LoginPage&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;username&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;constructor&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;authentication&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationService&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;navCtrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NavController&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;loadingCtrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LoadingController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;submitLogin&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// configure loading spinner
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;loading&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;loadingCtrl&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;create&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// present it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;loading&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;present&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(() =&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// perform login
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;authentication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;login&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;username&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;toPromise&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// on success dismiss
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(() =&amp;gt; &lt;span style="color:#a6e22e"&gt;loading&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;dismiss&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// and apply successful login
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(() =&amp;gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;navCtrl&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setRoot&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;MyEntryPage&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might have noticed, but we already introduced a bug: if the login fails, our promise rejects and &lt;code&gt;.then(() =&amp;gt; loading.dismiss())&lt;/code&gt; will never be called, our &lt;code&gt;Loading&lt;/code&gt; will still be presented and the user will be forced to restart the whole app in order to try the correct credentials.
The most obvious fix would be to just insert a &lt;code&gt;catch&lt;/code&gt; which dismissed the loading, too. But this would not prevent any other usages of &lt;code&gt;Loading&lt;/code&gt; from being presented forever.&lt;/p&gt;
&lt;p&gt;In order to solve this problem, we will create a new controller, which will present loadings and automatically dismisses them once a given promise resolves or rejects.
We want our &lt;code&gt;submitLogin&lt;/code&gt; to be completely free from all &lt;code&gt;loading.dismiss()&lt;/code&gt; calls and even the requirement to even keep our &lt;code&gt;loading&lt;/code&gt; variable. Additionally we donât want to be forced to either subscribe to an observable nor to convert it to a promise.&lt;/p&gt;
&lt;p&gt;The code we want inside &lt;code&gt;LoginPage.submitLogin&lt;/code&gt; should be focused and compact.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;submitLogin&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// present while ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;activityCtrl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;presentWhile&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ... logging in
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;authentication&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;login&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;username&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;password&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// on success, apply login
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(() =&amp;gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;navCtrl&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setRoot&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;MyEntryPage&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;presentWhile&lt;/code&gt; will be implemented inside a service called &lt;code&gt;ActivityController&lt;/code&gt; and will either work with promises or observables. It handles dismissing our loading spinner and returns a new promise resolving to the same value (or rejecting to the same error).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Injectable&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ActivityController&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;constructor&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;loadingCtrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LoadingController&lt;/span&gt;) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;presentWhile&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;active&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; Promise&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#f92672"&gt;|&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;options&lt;/span&gt;&lt;span style="color:#f92672"&gt;?:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LoadingOptions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )&lt;span style="color:#f92672"&gt;:&lt;/span&gt; Promise&lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// create loading using optionally given options
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;spinner&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;loadingCtrl&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;create&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;options&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;spinner&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;present&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// convert observables to promises
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; () =&amp;gt; (&lt;span style="color:#a6e22e"&gt;active&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Observable&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;active&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;toPromise&lt;/span&gt;() &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;active&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// dismiss and keep result
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;result&lt;/span&gt; =&amp;gt; &lt;span style="color:#a6e22e"&gt;spinner&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;dismiss&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(() =&amp;gt; &lt;span style="color:#a6e22e"&gt;result&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// keep the error, but dismiss
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt; =&amp;gt; &lt;span style="color:#a6e22e"&gt;spinner&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;dismiss&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;(() =&amp;gt; Promise.&lt;span style="color:#a6e22e"&gt;reject&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to actually use &lt;code&gt;ActivityController&lt;/code&gt; in our &lt;code&gt;LoginPage&lt;/code&gt;, we need to inject it. As there Ionicâs controllers (&lt;code&gt;LoadingController&lt;/code&gt;, &lt;code&gt;NavController&lt;/code&gt;, etc.) will be injected for each page separately, we need to do the same for each page, too.
Inside your unit tests, you can &lt;a href="https://angular.io/guide/testing#component-override"&gt;override providers&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;IonicPage&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Component&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;templateUrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./login.page.html&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// add provider to component
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;provders&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#a6e22e"&gt;ActivityController&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;LoginPage&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// username, password
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;constructor&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;authentication&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AuthenticationService&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;navCtrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;NavController&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readonly&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;activityCtrl&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ActivityController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// submitLogin()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Within this blogpost you have seen which problems may occur when using loading spinners and how to solve them in general. Furthermore you learnt how to create a new controller for Ionic and how to use it.&lt;/p&gt;
&lt;p&gt;Do you have more ideas for using a pattern like this?&lt;/p&gt;</description></item></channel></rss>